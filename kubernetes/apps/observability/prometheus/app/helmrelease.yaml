apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
spec:
  interval: 30m
  chart:
    spec:
      chart: prometheus
      version: 25.28.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    rbac:
      create: true

    podSecurityPolicy:
      enabled: true

    serviceAccounts:
      alertmanager:
        create: true
        name:
      kubeStateMetrics:
        create: true
        name:
      nodeExporter:
        create: true
        name:
      pushgateway:
        create: true
        name:
      server:
        create: true
        name:

    alertmanager:
      enabled: true
      name: alertmanager
      image:
        repository: prom/alertmanager
        tag: v0.27.0
        pullPolicy: IfNotPresent
      baseURL: "/"

      ingress:
        enabled: true
        ingressClassName: internal

        annotations:
          kubernetes.io/ingress.class: internal
          kubernetes.io/tls-acme: 'true'

        hosts:
          - "alertmanager.${SECRET_DOMAIN}"

        path: /
        pathType: Prefix
        tls:
          - secretName: alertmanager-server-tls
            hosts:
              - "alertmanager.${SECRET_DOMAIN}"
      strategy:
        type: Recreate

      persistentVolume:
        enabled: false
        accessModes:
          - ReadWriteOnce
        mountPath: /data
        size: 2Gi
        storageClass: "openebs-hostpath"
      replicaCount: 1
      resources:
        limits:
          cpu: 10m
          memory: 32Mi
        requests:
          cpu: 10m
          memory: 32Mi

    configmapReload:
      prometheus:
        enabled: true
        name: configmap-reload
        image:
          repository: quay.io/prometheus-operator/prometheus-config-reloader
          tag: v0.78.0
          digest: ""
          pullPolicy: IfNotPresent
        containerPort: 8080
        containerPortName: metrics

        livenessProbe:
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10
          initialDelaySeconds: 2

        readinessProbe:
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10

        startupProbe:
          enabled: false
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10

        #resources:
        #  requests:
        #    memory: "64Mi"
        #    cpu: "100m"
        #  limits:
        #    memory: "128Mi"
        #    cpu: "200m"

    server:
      name: server
      releaseNamespace: false
      image:
        repository: quay.io/prometheus/prometheus
        tag: "v2.53.3"
        pullPolicy: Always

      enableServiceLinks: true
      extraFlags:
        - web.enable-lifecycle
      configPath: /etc/config/prometheus.yml

      global:
        scrape_interval: 1m
        scrape_timeout: 10s
        evaluation_interval: 1m

      ingress:
        enabled: true
        ingressClassName: internal

        annotations:
          kubernetes.io/ingress.class: internal
          kubernetes.io/tls-acme: 'true'

        hosts:
          - "prometheus.${SECRET_DOMAIN}"

        path: /
        pathType: Prefix
        tls:
          - secretName: prometheus-server-tls
            hosts:
              - "prometheus.${SECRET_DOMAIN}"

      ## Server Deployment Strategy type
      strategy:
        type: Recreate

      podAntiAffinityTopologyKey: kubernetes.io/hostname

      topologySpreadConstraints: []
      podDisruptionBudget:
        enabled: false
        maxUnavailable: 1
      persistentVolume:
        enabled: true
        accessModes:
          - ReadWriteOnce
        mountPath: /data
        size: 8Gi
        storageClass: "openebs-hostpath"

      replicaCount: 1
      revisionHistoryLimit: 10
      statefulSet:
        enabled: false
        annotations: {}
        labels: {}
        podManagementPolicy: OrderedReady
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
          gRPC:
            enabled: false
            servicePort: 10901
            # nodePort: 10901
        pvcDeleteOnStsDelete: false
        pvcDeleteOnStsScale: false

      tcpSocketProbeEnabled: false
      probeScheme: HTTP
      readinessProbeInitialDelay: 30
      readinessProbePeriodSeconds: 5
      readinessProbeTimeout: 4
      readinessProbeFailureThreshold: 3
      readinessProbeSuccessThreshold: 1
      livenessProbeInitialDelay: 30
      livenessProbePeriodSeconds: 15
      livenessProbeTimeout: 10
      livenessProbeFailureThreshold: 3
      livenessProbeSuccessThreshold: 1
      startupProbe:
        enabled: false
        periodSeconds: 5
        failureThreshold: 30
        timeoutSeconds: 10

      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 500m
          memory: 512Mi

      dnsPolicy: ClusterFirst
      ## Security context to be added to server pods
      ##
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534

      service:
        enabled: true
        clusterIP: ""
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        sessionAffinity: None
        type: ClusterIP

        gRPC:
          enabled: false
          servicePort: 10901
          # nodePort: 10901

      terminationGracePeriodSeconds: 300
      retention: "15d"
